{"version":3,"sources":["index.js"],"names":["products","fetch","then","response","ok","json","initialize","console","log","status","statusText","category","document","querySelector","searchTerm","searchBtn","main","lastCategory","value","lastSearch","categoryGroup","finalGroup","updateDisplay","onclick","selectCategory","e","preventDefault","trim","selectProducts","lowerCaseType","toLowerCase","i","length","type","push","lowerCaseSearchTerm","name","indexOf","firstChild","removeChild","para","createElement","textContent","appendChild","fetchBlob","product","url","image","blob","objectURL","URL","createObjectURL","showProduct","section","heading","setAttribute","replace","charAt","toUpperCase","price","toFixed","src","alt","onload","window","revokeObjectURL"],"mappings":"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","file":"can-store.e31bb0bc.js","sourceRoot":"..","sourcesContent":["// create a variable to store the products 'database' in\r\nvar products;\r\n\r\n// use fetch to retrieve it, and report any errors that occur in the fetch operation\r\n// once the products have been successfully loaded and formatted as a JSON object\r\n// using response.json(), run the initialize() function\r\nfetch('products.json').then(function (response) {\r\n    if (response.ok) {\r\n        response.json().then(function (json) {\r\n            products = json;\r\n            initialize();\r\n        });\r\n    } else {\r\n        console.log('Network request for products.json failed with response ' + response.status + ': ' + response.statusText);\r\n    }\r\n});\r\n\r\n// sets up the app logic, declares required variables, contains all the other functions\r\nfunction initialize() {\r\n    // grab the UI elements that we need to manipulate\r\n    var category = document.querySelector('#category');\r\n    var searchTerm = document.querySelector('#searchTerm');\r\n    var searchBtn = document.querySelector('button');\r\n    var main = document.querySelector('main');\r\n\r\n    // keep a record of what the last category and search term entered were\r\n    var lastCategory = category.value;\r\n    // no search has been made yet\r\n    var lastSearch = '';\r\n\r\n    // these contain the results of filtering by category, and search term\r\n    // finalGroup will contain the products that need to be displayed after\r\n    // the searching has been done. Each will be an array containing objects.\r\n    // Each object will represent a product\r\n    var categoryGroup;\r\n    var finalGroup;\r\n\r\n    // To start with, set finalGroup to equal the entire products database\r\n    // then run updateDisplay(), so ALL products are displayed initially.\r\n    finalGroup = products;\r\n    updateDisplay();\r\n\r\n    // Set both to equal an empty array, in time for searches to be run\r\n    categoryGroup = [];\r\n    finalGroup = [];\r\n\r\n    // when the search button is clicked, invoke selectCategory() to start\r\n    // a search running to select the category of products we want to display\r\n    searchBtn.onclick = selectCategory;\r\n\r\n    function selectCategory(e) {\r\n        // Use preventDefault() to stop the form submitting — that would ruin\r\n        // the experience\r\n        e.preventDefault();\r\n\r\n        // Set these back to empty arrays, to clear out the previous search\r\n        categoryGroup = [];\r\n        finalGroup = [];\r\n\r\n        // if the category and search term are the same as they were the last time a\r\n        // search was run, the results will be the same, so there is no point running\r\n        // it again — just return out of the function\r\n        if (category.value === lastCategory && searchTerm.value.trim() === lastSearch) {\r\n            return;\r\n        } else {\r\n            // update the record of last category and search term\r\n            lastCategory = category.value;\r\n            lastSearch = searchTerm.value.trim();\r\n            // In this case we want to select all products, then filter them by the search\r\n            // term, so we just set categoryGroup to the entire JSON object, then run selectProducts()\r\n            if (category.value === 'All') {\r\n                categoryGroup = products;\r\n                selectProducts();\r\n                // If a specific category is chosen, we need to filter out the products not in that\r\n                // category, then put the remaining products inside categoryGroup, before running\r\n                // selectProducts()\r\n            } else {\r\n                // the values in the <option> elements are uppercase, whereas the categories\r\n                // store in the JSON (under \"type\") are lowercase. We therefore need to convert\r\n                // to lower case before we do a comparison\r\n                var lowerCaseType = category.value.toLowerCase();\r\n                for (var i = 0; i < products.length; i++) {\r\n                    // If a product's type property is the same as the chosen category, we want to\r\n                    // dispay it, so we push it onto the categoryGroup array\r\n                    if (products[i].type === lowerCaseType) {\r\n                        categoryGroup.push(products[i]);\r\n                    }\r\n                }\r\n\r\n                // Run selectProducts() after the filtering has bene done\r\n                selectProducts();\r\n            }\r\n        }\r\n    }\r\n\r\n    // selectProducts() Takes the group of products selected by selectCategory(), and further\r\n    // filters them by the tnered search term (if one has bene entered)\r\n    function selectProducts() {\r\n        // If no search term has been entered, just make the finalGroup array equal to the categoryGroup\r\n        // array — we don't want to filter the products further — then run updateDisplay().\r\n        if (searchTerm.value.trim() === '') {\r\n            finalGroup = categoryGroup;\r\n            updateDisplay();\r\n        } else {\r\n            // Make sure the search term is converted to lower case before comparison. We've kept the\r\n            // product names all lower case to keep things simple\r\n            var lowerCaseSearchTerm = searchTerm.value.trim().toLowerCase();\r\n            // For each product in categoryGroup, see if the search term is contained inside the product name\r\n            // (if the indexOf() result doesn't return -1, it means it is) — if it is, then push the product\r\n            // onto the finalGroup array\r\n            for (var i = 0; i < categoryGroup.length; i++) {\r\n                if (categoryGroup[i].name.indexOf(lowerCaseSearchTerm) !== -1) {\r\n                    finalGroup.push(categoryGroup[i]);\r\n                }\r\n            }\r\n\r\n            // run updateDisplay() after this second round of filtering has been done\r\n            updateDisplay();\r\n        }\r\n\r\n    }\r\n\r\n    // start the process of updating the display with the new set of products\r\n    function updateDisplay() {\r\n        // remove the previous contents of the <main> element\r\n        while (main.firstChild) {\r\n            main.removeChild(main.firstChild);\r\n        }\r\n\r\n        // if no products match the search term, display a \"No results to display\" message\r\n        if (finalGroup.length === 0) {\r\n            var para = document.createElement('p');\r\n            para.textContent = 'No results to display!';\r\n            main.appendChild(para);\r\n            // for each product we want to display, pass its product object to fetchBlob()\r\n        } else {\r\n            for (var i = 0; i < finalGroup.length; i++) {\r\n                fetchBlob(finalGroup[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    // fetchBlob uses fetch to retrieve the image for that product, and then sends the\r\n    // resulting image display URL and product object on to showProduct() to finally\r\n    // display it\r\n    function fetchBlob(product) {\r\n        // construct the URL path to the image file from the product.image property\r\n        var url = 'images/' + product.image;\r\n        console.log(url);\r\n        // Use fetch to fetch the image, and convert the resulting response to a blob\r\n        // Again, if any errors occur we report them in the console.\r\n        fetch(url).then(function (response) {\r\n            if (response.ok) {\r\n                response.blob().then(function (blob) {\r\n                    // Convert the blob to an object URL — this is basically an temporary internal URL\r\n                    // that points to an object stored inside the browser\r\n                    var objectURL = URL.createObjectURL(blob);\r\n                    console.log(objectURL);\r\n                    // invoke showProduct\r\n                    showProduct(objectURL, product);\r\n                });\r\n            } else {\r\n                console.log('Network request for \"' + product.name + '\" image failed with response ' + response.status + ': ' + response.statusText);\r\n            }\r\n        });\r\n    }\r\n\r\n    // Display a product inside the <main> element\r\n    function showProduct(objectURL, product) {\r\n        // create <section>, <h2>, <p>, and <img> elements\r\n        var section = document.createElement('section');\r\n        var heading = document.createElement('h2');\r\n        var para = document.createElement('p');\r\n        var image = document.createElement('img');\r\n\r\n        // give the <section> a classname equal to the product \"type\" property so it will display the correct icon\r\n        section.setAttribute('class', product.type);\r\n\r\n        // Give the <h2> textContent equal to the product \"name\" property, but with the first character\r\n        // replaced with the uppercase version of the first character\r\n        heading.textContent = product.name.replace(product.name.charAt(0), product.name.charAt(0).toUpperCase());\r\n\r\n        // Give the <p> textContent equal to the product \"price\" property, with a $ sign in front\r\n        // toFixed(2) is used to fix the price at 2 decimal places, so for example 1.40 is displayed\r\n        // as 1.40, not 1.4.\r\n        para.textContent = '$' + product.price.toFixed(2);\r\n\r\n        // Set the src of the <img> element to the ObjectURL, and the alt to the product \"name\" property\r\n        image.src = objectURL;\r\n\r\n        image.alt = product.name;\r\n        try {\r\n\r\n            image.onload = function () {\r\n                window.URL.revokeObjectURL(image.src);\r\n                console.log(\"revoke\");\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.log(\"ERROR\", e);\r\n        }\r\n        // append the elements to the DOM as appropriate, to add the product to the UI\r\n        main.appendChild(section);\r\n\r\n        section.appendChild(heading);\r\n        section.appendChild(para);\r\n        section.appendChild(image);\r\n        console.log(\"has load here\")\r\n\r\n\r\n    }\r\n}\r\n"]}