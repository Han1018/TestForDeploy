{"version":3,"sources":["can-script.js"],"names":["products","initialize","category","categoryGroup","finalGroup","document","querySelector","searchTerm","searchBtn","main","lastCategory","value","lastSearch","selectProducts","trim","updateDisplay","lowerCaseSearchTerm","toLowerCase","i","length","name","indexOf","push","firstChild","removeChild","para","createElement","textContent","appendChild","fetchBlob","product","url","image","console","log","fetch","then","response","ok","blob","objectURL","URL","createObjectURL","showProduct","section","heading","setAttribute","type","replace","charAt","toUpperCase","price","toFixed","src","alt","onload","window","revokeObjectURL","e","status","statusText","onclick","selectCategory","preventDefault","lowerCaseType","json"],"mappings":";AACA,IAAIA,EAiBJ,SAASC,IAEHC,IAcAC,EACAC,EAfAF,EAAWG,SAASC,cAAc,aAClCC,EAAaF,SAASC,cAAc,eACpCE,EAAYH,SAASC,cAAc,UACnCG,EAAOJ,SAASC,cAAc,QAG9BI,EAAeR,EAASS,MAExBC,EAAa,GAqERC,SAAAA,IAGHN,GAA4B,KAA5BA,EAAWI,MAAMG,OACnBV,EAAaD,EACbY,QACK,CAOA,IAJDC,IAAAA,EAAsBT,EAAWI,MAAMG,OAAOG,cAIzCC,EAAI,EAAGA,EAAIf,EAAcgB,OAAQD,KACoB,IAAxDf,EAAce,GAAGE,KAAKC,QAAQL,IAChCZ,EAAWkB,KAAKnB,EAAce,IAKlCH,KAMKA,SAAAA,IAEAN,KAAAA,EAAKc,YACVd,EAAKe,YAAYf,EAAKc,YAIpBnB,GAAsB,IAAtBA,EAAWe,OAAc,CACvBM,IAAAA,EAAOpB,SAASqB,cAAc,KAClCD,EAAKE,YAAc,yBACnBlB,EAAKmB,YAAYH,QAGZ,IAAA,IAAIP,EAAI,EAAGA,EAAId,EAAWe,OAAQD,IACrCW,EAAUzB,EAAWc,IAQlBW,SAAAA,EAAUC,GAEbC,IAAAA,EAAM,UAAYD,EAAQE,MAC9BC,QAAQC,IAAIH,GAGZI,MAAMJ,GAAKK,KAAK,SAAUC,GACpBA,EAASC,GACXD,EAASE,OAAOH,KAAK,SAAUG,GAGzBC,IAAAA,EAAYC,IAAIC,gBAAgBH,GACpCN,QAAQC,IAAIM,GAWXG,SAAYH,EAAWV,GAE1Bc,IAAAA,EAAUvC,SAASqB,cAAc,WACjCmB,EAAUxC,SAASqB,cAAc,MACjCD,EAAOpB,SAASqB,cAAc,KAC9BM,EAAQ3B,SAASqB,cAAc,OAGnCkB,EAAQE,aAAa,QAAShB,EAAQiB,MAItCF,EAAQlB,YAAcG,EAAQV,KAAK4B,QAAQlB,EAAQV,KAAK6B,OAAO,GAAInB,EAAQV,KAAK6B,OAAO,GAAGC,eAK1FzB,EAAKE,YAAc,IAAMG,EAAQqB,MAAMC,QAAQ,GAG/CpB,EAAMqB,IAAMb,EAEZR,EAAMsB,IAAMxB,EAAQV,KAChB,IAEFY,EAAMuB,OAAS,WACbC,OAAOf,IAAIgB,gBAAgBzB,EAAMqB,KACjCpB,QAAQC,IAAI,WAGhB,MAAOwB,GACLzB,QAAQC,IAAI,QAASwB,GAGvBjD,EAAKmB,YAAYgB,GAEjBA,EAAQhB,YAAYiB,GACpBD,EAAQhB,YAAYH,GACpBmB,EAAQhB,YAAYI,GACpBC,QAAQC,IAAI,iBAhDNS,CAAYH,EAAWV,KAGzBG,QAAQC,IAAI,wBAA0BJ,EAAQV,KAAO,gCAAkCiB,EAASsB,OAAS,KAAOtB,EAASuB,cA3H/HxD,EAAaJ,EACbe,IAGAZ,EAAgB,GAChBC,EAAa,GAIbI,EAAUqD,QAEDC,SAAeJ,GAYlBxD,GATJwD,EAAEK,iBAGF5D,EAAgB,GAChBC,EAAa,GAKTF,EAASS,QAAUD,GAAgBH,EAAWI,MAAMG,SAAWF,EACjE,OAOIV,GAJJQ,EAAeR,EAASS,MACxBC,EAAaL,EAAWI,MAAMG,OAGP,QAAnBZ,EAASS,MACXR,EAAgBH,EAChBa,QAIK,CAKA,IADDmD,IAAAA,EAAgB9D,EAASS,MAAMM,cAC1BC,EAAI,EAAGA,EAAIlB,EAASmB,OAAQD,IAG/BlB,EAASkB,GAAG6B,OAASiB,GACvB7D,EAAcmB,KAAKtB,EAASkB,IAKhCL,MApFRsB,MAAM,iBAAiBC,KAAK,SAAUC,GAChCA,EAASC,GACXD,EAAS4B,OAAO7B,KAAK,SAAU6B,GAC7BjE,EAAWiE,EACXhE,MAGFgC,QAAQC,IAAI,0DAA4DG,EAASsB,OAAS,KAAOtB,EAASuB","file":"can-script.34016214.js","sourceRoot":"..","sourcesContent":["// create a variable to store the products 'database' in\nvar products;\n\n// use fetch to retrieve it, and report any errors that occur in the fetch operation\n// once the products have been successfully loaded and formatted as a JSON object\n// using response.json(), run the initialize() function\nfetch('products.json').then(function (response) {\n  if (response.ok) {\n    response.json().then(function (json) {\n      products = json;\n      initialize();\n    });\n  } else {\n    console.log('Network request for products.json failed with response ' + response.status + ': ' + response.statusText);\n  }\n});\n\n// sets up the app logic, declares required variables, contains all the other functions\nfunction initialize() {\n  // grab the UI elements that we need to manipulate\n  var category = document.querySelector('#category');\n  var searchTerm = document.querySelector('#searchTerm');\n  var searchBtn = document.querySelector('button');\n  var main = document.querySelector('main');\n\n  // keep a record of what the last category and search term entered were\n  var lastCategory = category.value;\n  // no search has been made yet\n  var lastSearch = '';\n\n  // these contain the results of filtering by category, and search term\n  // finalGroup will contain the products that need to be displayed after\n  // the searching has been done. Each will be an array containing objects.\n  // Each object will represent a product\n  var categoryGroup;\n  var finalGroup;\n\n  // To start with, set finalGroup to equal the entire products database\n  // then run updateDisplay(), so ALL products are displayed initially.\n  finalGroup = products;\n  updateDisplay();\n\n  // Set both to equal an empty array, in time for searches to be run\n  categoryGroup = [];\n  finalGroup = [];\n\n  // when the search button is clicked, invoke selectCategory() to start\n  // a search running to select the category of products we want to display\n  searchBtn.onclick = selectCategory;\n\n  function selectCategory(e) {\n    // Use preventDefault() to stop the form submitting — that would ruin\n    // the experience\n    e.preventDefault();\n\n    // Set these back to empty arrays, to clear out the previous search\n    categoryGroup = [];\n    finalGroup = [];\n\n    // if the category and search term are the same as they were the last time a\n    // search was run, the results will be the same, so there is no point running\n    // it again — just return out of the function\n    if (category.value === lastCategory && searchTerm.value.trim() === lastSearch) {\n      return;\n    } else {\n      // update the record of last category and search term\n      lastCategory = category.value;\n      lastSearch = searchTerm.value.trim();\n      // In this case we want to select all products, then filter them by the search\n      // term, so we just set categoryGroup to the entire JSON object, then run selectProducts()\n      if (category.value === 'All') {\n        categoryGroup = products;\n        selectProducts();\n        // If a specific category is chosen, we need to filter out the products not in that\n        // category, then put the remaining products inside categoryGroup, before running\n        // selectProducts()\n      } else {\n        // the values in the <option> elements are uppercase, whereas the categories\n        // store in the JSON (under \"type\") are lowercase. We therefore need to convert\n        // to lower case before we do a comparison\n        var lowerCaseType = category.value.toLowerCase();\n        for (var i = 0; i < products.length; i++) {\n          // If a product's type property is the same as the chosen category, we want to\n          // dispay it, so we push it onto the categoryGroup array\n          if (products[i].type === lowerCaseType) {\n            categoryGroup.push(products[i]);\n          }\n        }\n\n        // Run selectProducts() after the filtering has bene done\n        selectProducts();\n      }\n    }\n  }\n\n  // selectProducts() Takes the group of products selected by selectCategory(), and further\n  // filters them by the tnered search term (if one has bene entered)\n  function selectProducts() {\n    // If no search term has been entered, just make the finalGroup array equal to the categoryGroup\n    // array — we don't want to filter the products further — then run updateDisplay().\n    if (searchTerm.value.trim() === '') {\n      finalGroup = categoryGroup;\n      updateDisplay();\n    } else {\n      // Make sure the search term is converted to lower case before comparison. We've kept the\n      // product names all lower case to keep things simple\n      var lowerCaseSearchTerm = searchTerm.value.trim().toLowerCase();\n      // For each product in categoryGroup, see if the search term is contained inside the product name\n      // (if the indexOf() result doesn't return -1, it means it is) — if it is, then push the product\n      // onto the finalGroup array\n      for (var i = 0; i < categoryGroup.length; i++) {\n        if (categoryGroup[i].name.indexOf(lowerCaseSearchTerm) !== -1) {\n          finalGroup.push(categoryGroup[i]);\n        }\n      }\n\n      // run updateDisplay() after this second round of filtering has been done\n      updateDisplay();\n    }\n\n  }\n\n  // start the process of updating the display with the new set of products\n  function updateDisplay() {\n    // remove the previous contents of the <main> element\n    while (main.firstChild) {\n      main.removeChild(main.firstChild);\n    }\n\n    // if no products match the search term, display a \"No results to display\" message\n    if (finalGroup.length === 0) {\n      var para = document.createElement('p');\n      para.textContent = 'No results to display!';\n      main.appendChild(para);\n      // for each product we want to display, pass its product object to fetchBlob()\n    } else {\n      for (var i = 0; i < finalGroup.length; i++) {\n        fetchBlob(finalGroup[i]);\n      }\n    }\n  }\n\n  // fetchBlob uses fetch to retrieve the image for that product, and then sends the\n  // resulting image display URL and product object on to showProduct() to finally\n  // display it\n  function fetchBlob(product) {\n    // construct the URL path to the image file from the product.image property\n    var url = 'images/' + product.image;\n    console.log(url);\n    // Use fetch to fetch the image, and convert the resulting response to a blob\n    // Again, if any errors occur we report them in the console.\n    fetch(url).then(function (response) {\n      if (response.ok) {\n        response.blob().then(function (blob) {\n          // Convert the blob to an object URL — this is basically an temporary internal URL\n          // that points to an object stored inside the browser\n          var objectURL = URL.createObjectURL(blob);\n          console.log(objectURL);\n          // invoke showProduct\n          showProduct(objectURL, product);\n        });\n      } else {\n        console.log('Network request for \"' + product.name + '\" image failed with response ' + response.status + ': ' + response.statusText);\n      }\n    });\n  }\n\n  // Display a product inside the <main> element\n  function showProduct(objectURL, product) {\n    // create <section>, <h2>, <p>, and <img> elements\n    var section = document.createElement('section');\n    var heading = document.createElement('h2');\n    var para = document.createElement('p');\n    var image = document.createElement('img');\n\n    // give the <section> a classname equal to the product \"type\" property so it will display the correct icon\n    section.setAttribute('class', product.type);\n\n    // Give the <h2> textContent equal to the product \"name\" property, but with the first character\n    // replaced with the uppercase version of the first character\n    heading.textContent = product.name.replace(product.name.charAt(0), product.name.charAt(0).toUpperCase());\n\n    // Give the <p> textContent equal to the product \"price\" property, with a $ sign in front\n    // toFixed(2) is used to fix the price at 2 decimal places, so for example 1.40 is displayed\n    // as 1.40, not 1.4.\n    para.textContent = '$' + product.price.toFixed(2);\n\n    // Set the src of the <img> element to the ObjectURL, and the alt to the product \"name\" property\n    image.src = objectURL;\n\n    image.alt = product.name;\n    try {\n\n      image.onload = function () {\n        window.URL.revokeObjectURL(image.src);\n        console.log(\"revoke\");\n      }\n    }\n    catch (e) {\n      console.log(\"ERROR\", e);\n    }\n    // append the elements to the DOM as appropriate, to add the product to the UI\n    main.appendChild(section);\n\n    section.appendChild(heading);\n    section.appendChild(para);\n    section.appendChild(image);\n    console.log(\"has load here\")\n\n\n  }\n}\n"]}